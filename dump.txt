Directory: /blockmap
------------------
File: /blockmap/BlockMap.java
/**
 * BlockMap.java
 *
 * Main Component: worldmodel/blockmodel/
 * Environment: MAIN
 *
 * This class represents a compact, queryable, read-optimized view of a specific
 * 3D area of the world at the block level—typically aligned with a region or
 * subregion used in pathfinding and AI planning. The `BlockMap` provides access
 * to block state, tags, navigability, and portal information, and is optimized
 * for use in short-term tactical decision-making (e.g., A* pathfinding).
 *
 * It supports both static reads (e.g., "Is this block solid?") and dynamic
 * simulation (e.g., "What if I break this block or place a new one?") and may
 * be constructed as a snapshot of real world data or a synthetic planning model.
 *
 * ---------------------------
 * What This File Does:
 * ---------------------------
 * - Encapsulates a 3D grid of blocks in a planning-relevant area
 * - Allows block-level pathfinding, simulation, and queries
 * - Stores portal references for region transitions
 *
 * ---------------------------
 * How This File Differs from Others:
 * ---------------------------
 * - Unlike `SubChunk`, this is the full abstraction across many subunits
 * - Unlike `Region`, this represents raw terrain—not semantic groupings
 * - Unlike `WorldModel`, this is local—not global
 *
 * ---------------------------
 * Assumptions:
 * ---------------------------
 * - The area covered is bounded and fits within memory
 * - The data may be a partial view of the actual Minecraft world
 * - Mutations to this map do not affect the real world unless explicitly committed
 *
 * ---------------------------
 * Dependencies:
 * ---------------------------
 * - `BlockPos` or internal indexing for 3D lookup
 * - `BlockTagMap` to describe block navigability and traits
 * - `PortalShape` to mark portals to other regions
 *
 * ---------------------------
 * Dependents:
 * ---------------------------
 * - `BlockPathfinder`: Uses this for A* expansion and cost estimation
 * - `Operation`: Evaluates movement and mutation feasibility using this map
 * - `SimulationClock`: May simulate block placement or erosion in this map
 * - `RegionBuilder`: May construct this as part of region definition
 *
 * ---------------------------
 * Implementation Details:
 * ---------------------------
 * - May be composed of multiple `SubChunk` instances
 * - Should support:
 *     - `BlockState getBlock(int x, int y, int z)`
 *     - `boolean isPassable(...)`
 *     - `List<PortalShape> getPortals()`
 *     - `simulatePlace(...)`, `simulateBreak(...)`
 * - May include a mutable and immutable version depending on use case
 */
package com.orebit.mod.worldmodel.pathing;

------------------
File: /blockmap/BlockTagMap.java
/**
 * BlockTagMap.java
 *
 * Main Component: worldmodel/blockmodel/
 * Environment: MAIN
 *
 * This class provides a compact, queryable mapping of block positions to
 * abstract block traits (tags), such as "isSolid", "isClimbable",
 * "isHazardous", "isBreakable", or "isPortalCandidate". It serves as a fast
 * pathfinding- and simulation-friendly view of the world’s physical terrain,
 * replacing expensive raw block lookups with meaningful gameplay semantics.
 *
 * Unlike Minecraft's built-in tag system, this map is optimized for AI use
 * and planning purposes. It may be statically derived from block state at
 * load time or dynamically updated during simulation or planning phases.
 *
 * ---------------------------
 * What This File Does:
 * ---------------------------
 * - Tags blocks with gameplay-relevant navigation and interaction traits
 * - Allows fast lookups of a block’s navigability, danger, or utility
 * - Supports filtering, masking, and region-scoped tag queries
 *
 * ---------------------------
 * How This File Differs from Others:
 * ---------------------------
 * - Unlike `BlockMap`, this does not store full block state—only traits
 * - Unlike `SubChunk`, this is semantic, not structural
 * - Unlike Minecraft's `BlockTags`, this is tuned for performance and AI logic
 *
 * ---------------------------
 * Assumptions:
 * ---------------------------
 * - Each block is associated with a fixed-size trait bitmask or enum set
 * - Tags can be updated (e.g., breaking a wall makes it passable)
 * - Not all tags are mutually exclusive
 *
 * ---------------------------
 * Dependencies:
 * ---------------------------
 * - Internal block coordinate system (likely shared with `BlockMap`)
 * - Enum or bitmask representing tags (e.g., `BlockNavTag`)
 *
 * ---------------------------
 * Dependents:
 * ---------------------------
 * - `BlockPathfinder`: Uses tag info to validate operations and compute costs
 * - `MovementOperation`: May reject paths that traverse dangerous or forbidden blocks
 * - `RegionBuilder`: May use tags to define region boundaries or portal locations
 *
 * ---------------------------
 * Implementation Details:
 * ---------------------------
 * - Likely implemented as:
 *     - `short[][][]` for bitflags, or
 *     - `EnumSet<BlockNavTag>` per block for higher fidelity
 * - Common tags might include:
 *     - `PASSABLE`, `BREAKABLE`, `CLIMBABLE`, `PORTAL`, `HAZARDOUS`, `SUPPORT_BLOCK`
 * - Should support:
 *     - `boolean hasTag(int x, y, z, BlockNavTag tag)`
 *     - `Set<BlockNavTag> getTags(...)`
 *     - `void updateTags(...)` for simulation
 */
package com.orebit.mod.worldmodel.pathing;

------------------
File: /blockmap/SubChunk.java
/**
 * SubChunk.java
 *
 * Main Component: worldmodel/blockmodel/
 * Environment: MAIN
 *
 * This class represents a 3D slice of block-level data, typically sized at
 * 16×16×16 or similar, and is used internally by the `BlockMap` to store
 * and organize terrain information in a memory- and cache-efficient layout.
 * A `SubChunk` may contain raw block state, navigation tags, and other metadata,
 * and is designed for rapid lookup, update, and simulation.
 *
 * SubChunks provide the blockmodel equivalent of Minecraft's chunk section
 * concept, enabling fast world access without traversing huge, flat arrays.
 * They are particularly useful for sparse loading, lazy updates, and
 * region-local modifications.
 *
 * ---------------------------
 * What This File Does:
 * ---------------------------
 * - Stores a fixed-size 3D block of block state or tag data
 * - Used by `BlockMap` to structure larger block volumes
 * - Supports read/write access to individual block-level traits
 *
 * ---------------------------
 * How This File Differs from Others:
 * ---------------------------
 * - Unlike `BlockMap`, this is a localized data structure, not a world abstraction
 * - Unlike `BlockTagMap`, this stores raw or preprocessed data, not traits
 * - Unlike `Region`, this does not represent semantic spaces—just geometry
 *
 * ---------------------------
 * Assumptions:
 * ---------------------------
 * - The size is fixed (usually 16×16×16) and aligned to a grid
 * - Block positions are relative to the subchunk's origin
 * - May store raw block types, tag bitfields, or other metadata
 *
 * ---------------------------
 * Dependencies:
 * ---------------------------
 * - Internal indexing scheme (likely flattened arrays for performance)
 * - (Optionally) `BlockTagMap` or other semantic overlays
 *
 * ---------------------------
 * Dependents:
 * ---------------------------
 * - `BlockMap`: Aggregates multiple SubChunks into full region slices
 * - `BlockPathfinder`: May query subchunks directly for block access or flags
 * - `RegionBuilder`: May scan subchunks to identify regions and portals
 *
 * ---------------------------
 * Implementation Details:
 * ---------------------------
 * - Common representations:
 *     - `short[]` or `byte[]` arrays for raw block or tag data
 *     - Flat indexing: `index = (y * 16 + z) * 16 + x`
 * - Should support:
 *     - `getBlock(x, y, z)`
 *     - `setBlock(x, y, z, value)`
 *     - `getTags(x, y, z)`
 */
package com.orebit.mod.worldmodel.pathing;

------------------
Directory: /region
------------------
File: /region/Portal.java
/**
 * Portal.java
 *
 * Main Component: worldmodel/regionmodel/
 * Environment: MAIN
 *
 * This class represents a logical transition or boundary between two adjacent
 * `Region` instances in the world model. A `Portal` may correspond to a physical
 * structure (doorway, tunnel, ladder, portal frame) or simply a block-space
 * boundary between walkable areas. It defines the relationship between source
 * and destination regions and may include metadata about geometry, cost,
 * visibility, and traversal constraints.
 *
 * The region-level pathfinder uses portals to construct a region graph, where
 * regions are nodes and portals are edges. Pathfinding between regions involves
 * identifying a sequence of portals leading from source to target.
 *
 * ---------------------------
 * What This File Does:
 * ---------------------------
 * - Defines a transition between two regions in the world model
 * - Encapsulates optional geometry via `PortalShape`
 * - Stores metadata about traversal costs, restrictions, or reliability
 *
 * ---------------------------
 * How This File Differs from Others:
 * ---------------------------
 * - Unlike `Region`, this is a connector—not a container
 * - Unlike `PortalShape`, this includes semantics and adjacency—not just shape
 * - Unlike `BlockPathOperation`, this is symbolic and graph-level—not executable
 *
 * ---------------------------
 * Assumptions:
 * ---------------------------
 * - Portals connect exactly two `Region` objects
 * - Portals may be unidirectional or bidirectional
 * - All region-to-region transitions must be represented by a portal
 *
 * ---------------------------
 * Dependencies:
 * ---------------------------
 * - `Region`: Source and destination
 * - `PortalShape`: Defines the physical geometry of the portal space
 * - (Optional) Cost estimation, traversal metadata, or world context
 *
 * ---------------------------
 * Dependents:
 * ---------------------------
 * - `RegionPathfinder`: Uses portals to traverse the region graph
 * - `RegionBuilder`: Detects and constructs portals during analysis
 * - `BlockPathfinder`: May use the portal shape as a goal zone
 * - `CompositePathPlan`: Translates portal-level transitions into local path plans
 *
 * ---------------------------
 * Implementation Details:
 * ---------------------------
 * - Should define:
 *     - `Region getSourceRegion()`
 *     - `Region getTargetRegion()`
 *     - `PortalShape getShape()`
 *     - `int getTraversalCostEstimate()` (1 byte or approximated)
 * - May support:
 *     - Directionality
 *     - Portal reliability (e.g., unstable Nether portal)
 *     - Special rules (e.g., wait time, hazard warning)
 */
package com.orebit.mod.worldmodel.region;

------------------
File: /region/PortalShape.java
/**
 * PortalShape.java
 *
 * Main Component: worldmodel/regionmodel/
 * Environment: MAIN
 *
 * This class defines the physical geometry of a portal space connecting two
 * regions in the world model. While a `Portal` defines a logical adjacency
 * between regions, the `PortalShape` specifies which blocks constitute the
 * transitional zone and how agents can detect, enter, or path toward it.
 *
 * The shape is typically represented as a cuboid, voxel list, or bounding box,
 * and may describe areas such as doorways, tunnels, stairwells, Nether portals,
 * or vertical shafts. `PortalShape` allows both AI and pathfinding systems to
 * reason about reachable goal zones at the block level when approaching a region
 * transition.
 *
 * ---------------------------
 * What This File Does:
 * ---------------------------
 * - Describes the physical space of a portal as a shape in the world
 * - Supports goal-matching for block-level navigation
 * - May define traversal constraints (e.g., minimum clearance or slope)
 *
 * ---------------------------
 * How This File Differs from Others:
 * ---------------------------
 * - Unlike `Portal`, this has no semantic or graph information—only geometry
 * - Unlike `Region`, this is not a container—only a boundary or entry zone
 * - Unlike `BlockMap`, this is sparse and high-level, not exhaustive
 *
 * ---------------------------
 * Assumptions:
 * ---------------------------
 * - Portal shapes are localized and small enough for efficient queries
 * - Each shape defines a valid transition between two regions
 * - A shape may contain multiple valid goal positions
 *
 * ---------------------------
 * Dependencies:
 * ---------------------------
 * - `BlockPos` or internal coordinate type
 * - (Optional) World context for validation or collision
 *
 * ---------------------------
 * Dependents:
 * ---------------------------
 * - `BlockPathfinder`: Uses this to target entry points
 * - `Portal`: Stores this to associate shape with region transition
 * - `RegionBuilder`: Detects shapes based on geometry patterns
 *
 * ---------------------------
 * Implementation Details:
 * ---------------------------
 * - May define:
 *     - `Set<BlockPos> getAllBlocks()`
 *     - `boolean contains(BlockPos)`
 *     - `BlockPos getNearestEntryTo(BlockPos)`
 *     - `BoundingBox getBounds()`
 * - May also expose:
 *     - `getEntryDirection()` (optional for alignment)
 *     - `isNavigableBy(EntityType)`
 */
package com.orebit.mod.worldmodel.region;

------------------
File: /region/Region.java
/**
 * Region.java
 *
 * Main Component: worldmodel/regionmodel/
 * Environment: MAIN
 *
 * This class represents a semantic unit of space in the world model—a room,
 * tunnel, cave, building, biome patch, or similar structure. A `Region` is a
 * node in the region graph used for high-level navigation, memory modeling,
 * behavior context, and world analysis. It is bounded, navigable, and connected
 * to other regions via `Portal` instances.
 *
 * Regions may be organized hierarchically within a `RegionTree`, allowing for
 * recursive reasoning, long-distance planning, memory scoping, or escape logic.
 * Each region may store portal connections, visibility metadata, threat markers,
 * or AI-relevant affordances like “contains resources” or “known safe zone.”
 *
 * ---------------------------
 * What This File Does:
 * ---------------------------
 * - Encapsulates a meaningful space within the Minecraft world
 * - Provides portal-level connectivity to adjacent regions
 * - Supports AI pathfinding, decision-making, and memory scope
 *
 * ---------------------------
 * How This File Differs from Others:
 * ---------------------------
 * - Unlike `BlockMap`, this is high-level and symbolic—not physical geometry
 * - Unlike `Portal`, this is a container—not a connector
 * - Unlike `RegionTree`, this is a single node—not a structure
 *
 * ---------------------------
 * Assumptions:
 * ---------------------------
 * - Each region is internally connected and bounded
 * - Each region connects to ≤ 32 neighbors via `Portal` instances
 * - Each region has a unique identity or coordinate space for lookup
 *
 * ---------------------------
 * Dependencies:
 * ---------------------------
 * - `Portal`: Used to define connections to other regions
 * - `RegionTree`: May track parent and child containment
 * - (Optional) `RegionMemory` or other overlays
 *
 * ---------------------------
 * Dependents:
 * ---------------------------
 * - `RegionPathfinder`: Uses regions and portals to build strategic plans
 * - `WorldModel`: May return regions for given block positions
 * - `BehaviorProfile`, `AIState`: May use region tags for behavior context
 * - `Debug tools`: May visualize region bounds, portals, tags
 *
 * ---------------------------
 * Implementation Details:
 * ---------------------------
 * - Should store:
 *     - A bounding box or voxel mask
 *     - A list of connected `Portal` objects
 *     - Metadata or region tags (e.g., "hostile", "flooded", "safe zone")
 * - May expose:
 *     - `List<Portal> getPortals()`
 *     - `boolean contains(BlockPos pos)`
 *     - `RegionId getId()`
 *     - `RegionTreeNode getParent()`
 */
package com.orebit.mod.worldmodel.region;

------------------
File: /region/RegionBuilder.java
/**
 * RegionBuilder.java
 *
 * Main Component: worldmodel/regionmodel/
 * Environment: MAIN
 *
 * This class is responsible for constructing `Region` instances from raw
 * block-level data. It performs the geometric and semantic analysis needed
 * to identify contiguous navigable areas, detect portals (transitions), and
 * assign meaningful boundaries to regions within the world model.
 *
 * The builder may be invoked during world load, exploration, or simulation.
 * It is the source of truth for generating the region graph used by
 * region-level pathfinding and AI reasoning. It supports initial creation,
 * updates, re-partitioning, and merging/splitting regions when world state
 * changes significantly.
 *
 * ---------------------------
 * What This File Does:
 * ---------------------------
 * - Scans blockmaps to identify discrete regions
 * - Detects and constructs `Portal` instances between regions
 * - Outputs region metadata, hierarchy, and spatial bounds
 *
 * ---------------------------
 * How This File Differs from Others:
 * ---------------------------
 * - Unlike `Region`, this is not a data model—it is an active constructor
 * - Unlike `RegionTree`, this is not a structure—it generates region nodes
 * - Unlike `BlockMap`, this analyzes rather than stores block data
 *
 * ---------------------------
 * Assumptions:
 * ---------------------------
 * - Region boundaries are formed by navigability constraints (e.g., walls, drops, gaps)
 * - Portals exist where traversal between regions is physically possible
 * - Input data is from a `BlockMap`, possibly via `SubChunk`s
 *
 * ---------------------------
 * Dependencies:
 * ---------------------------
 * - `BlockMap` and `BlockTagMap`: Used to scan navigability and features
 * - `Region`, `Portal`, `PortalShape`: Constructed and returned as output
 * - `RegionTree`: May be updated or extended during build
 *
 * ---------------------------
 * Dependents:
 * ---------------------------
 * - `WorldModel`: May invoke this to (re)build parts of the region graph
 * - `RegionPathfinder`: Relies on builder output for graph correctness
 * - `Debug tools`: May visualize boundaries and portal detection
 *
 * ---------------------------
 * Implementation Details:
 * ---------------------------
 * - Likely uses a flood-fill or navigation-surface-aware scan
 * - May define:
 *     - `List<Region> buildFrom(BlockMap map)`
 *     - `Region updateRegion(...)`
 *     - `boolean isPortalCandidate(BlockPos pos)`
 * - May optionally:
 *     - Group regions into hierarchical clusters
 *     - Assign tags based on contents (e.g., "dangerous", "resource-rich")
 */
package com.orebit.mod.worldmodel.region;

------------------
File: /region/RegionKnowledge.java
/**
 * RegionKnowledge.java
 *
 * Main Component: worldmodel/regionmodel/
 * Environment: MAIN
 *
 * This class stores AI-relevant knowledge and memory about a specific `Region`,
 * enabling bots to reason about safety, familiarity, utility, and historical
 * interactions. It serves as a cognitive overlay to the region model, and may
 * be used for pathfinding heuristics, behavioral choices, strategic planning,
 * or social context.
 *
 * Region knowledge may include factors like exploration progress, threat level,
 * last visit time, known resources, hostility markers, or whether the region
 * has been claimed by another bot. It allows the bot to behave more intelligently
 * by incorporating learned experiences into its world model.
 *
 * ---------------------------
 * What This File Does:
 * ---------------------------
 * - Tracks AI-perceived knowledge about a given region
 * - Supports memory decay, familiarity, and subjective scoring
 * - Annotates regions with learned or observed data
 *
 * ---------------------------
 * How This File Differs from Others:
 * ---------------------------
 * - Unlike `Region`, this is cognitive—not structural
 * - Unlike `BlockMap`, this is subjective—not spatial
 * - Unlike `MemoryEntry`, this is scoped to world geography—not abstract thoughts
 *
 * ---------------------------
 * Assumptions:
 * ---------------------------
 * - One `RegionKnowledge` instance exists per known region per bot
 * - Data is updated incrementally as bots explore and interact
 * - Some data may decay or reset over time
 *
 * ---------------------------
 * Dependencies:
 * ---------------------------
 * - `Region`: The subject of this knowledge object
 * - `SimulationClock`, `MemoryDecayStrategy`: May control decay or updates
 * - (Optionally) `PathFollower`, `CombatSystem`: May update scores based on outcomes
 *
 * ---------------------------
 * Dependents:
 * ---------------------------
 * - `Pathfinding heuristics`: May avoid or prefer certain regions
 * - `AIStateMachine`: May choose behaviors based on threat or familiarity
 * - `PlanningSystem`: May bias toward safe or resource-rich routes
 *
 * ---------------------------
 * Implementation Details:
 * ---------------------------
 * - May store:
 *     - `float familiarityScore`
 *     - `float threatEstimate`
 *     - `Instant lastVisit`
 *     - `boolean hasBeenExplored`
 *     - `Set<BotId> knownClaimants`
 * - Should expose:
 *     - `void updateFromObservation(...)`
 *     - `boolean isHostile()`
 *     - `float getExplorationBias()`
 */
package com.orebit.mod.worldmodel.region;

------------------
File: /region/RegionTree.java
/**
 * RegionTree.java
 *
 * Main Component: worldmodel/regionmodel/
 * Environment: MAIN
 *
 * This class represents the self-balancing hierarchical structure that organizes
 * all `Region` instances into a semantic containment tree. Each region may be a
 * child of a larger "super-region" (e.g., a base contains rooms, a cave contains
 * chambers), forming a recursive, tree-like map of the world that supports both
 * spatial reasoning and long-range navigation.
 *
 * Unlike regular octrees or grid-based partitioning, the `RegionTree` is
 * semantic and flexible—boundaries are determined by navigability and portal
 * structure, not fixed cell size. The tree allows for efficient reasoning about
 * scope, locality, planning boundaries, and proximity within the world.
 *
 * ---------------------------
 * What This File Does:
 * ---------------------------
 * - Stores the parent-child relationships between regions
 * - Enables recursive traversal and containment queries
 * - Supports dynamic rebalancing as the world changes
 *
 * ---------------------------
 * How This File Differs from Others:
 * ---------------------------
 * - Unlike `Region`, this is a structure—not a spatial object
 * - Unlike `Portal`, this does not represent connections—only containment
 * - Unlike `BlockMap`, this has no geometry—only hierarchy
 *
 * ---------------------------
 * Assumptions:
 * ---------------------------
 * - Each region has exactly one parent (except the root)
 * - Regions may contain zero or more child regions
 * - The structure is acyclic and rooted
 * - The number of adjacent external regions is capped (e.g., 32)
 *
 * ---------------------------
 * Dependencies:
 * ---------------------------
 * - `Region`: Nodes of the tree
 * - (Optional) `Portal`: Used to determine adjacency when restructuring
 * - (Optional) `WorldModel`: Provides external queries or lookups
 *
 * ---------------------------
 * Dependents:
 * ---------------------------
 * - `RegionPathfinder`: Uses this to localize and optimize graph traversal
 * - `CompositePathPlan`: May determine block-to-region-to-superregion transitions
 * - `PlanningSystem`: May restrict search to a specific subtree
 * - `RegionKnowledge`: May be aggregated or inherited through the tree
 *
 * ---------------------------
 * Implementation Details:
 * ---------------------------
 * - Each node may store:
 *     - `Region region`
 *     - `RegionTree parent`
 *     - `List<RegionTree> children`
 * - May expose:
 *     - `RegionTree getCommonAncestor(Region a, Region b)`
 *     - `RegionTree getRoot()`
 *     - `List<Region> getSubtreeRegions()`
 *     - `void rebalance()` or `void mergeChildren(...)`
 */
package com.orebit.mod.worldmodel.region;

------------------
File: /WorldModel.java
/**
 * WorldModel.java
 *
 * Main Component: worldmodel/
 * Environment: MAIN
 *
 * This interface defines the top-level abstraction over all world-relevant data
 * used by the AI systems. It exposes unified access to both the low-level
 * blockmap (for tactical, physical movement) and the high-level region graph
 * (for strategic planning and semantic reasoning). The world model enables bots
 * to perceive, plan, and simulate their environment in a way that is efficient,
 * scalable, and context-aware.
 *
 * It may be implemented as a read-only snapshot of the live world (for planning),
 * or as a persistent evolving model updated in real-time with game state and
 * bot exploration (for memory and awareness).
 *
 * ---------------------------
 * What This File Does:
 * ---------------------------
 * - Provides a unified API for querying world state at both block and region scale
 * - Serves as the foundation for pathfinding, memory, planning, and navigation
 * - Delegates to `BlockMap`, `RegionTree`, and semantic overlays like portals
 *
 * ---------------------------
 * How This File Differs from Others:
 * ---------------------------
 * - Unlike `BlockMap`, this covers the *entire* AI-relevant world
 * - Unlike `Region`, this is not a single location—it’s the full scope
 * - Unlike `Memory`, this is objective and external—not bot-specific
 *
 * ---------------------------
 * Assumptions:
 * ---------------------------
 * - All queries are spatially scoped (e.g., relative to a bot's known surroundings)
 * - Subcomponents may be loaded lazily or generated on demand
 * - May include both real-world and simulated overlays (e.g., temporary plans)
 *
 * ---------------------------
 * Dependencies:
 * ---------------------------
 * - `BlockMap`, `SubChunk`, `BlockTagMap`: For physical terrain access
 * - `Region`, `RegionTree`, `Portal`: For semantic region graph access
 * - (Optional) `RegionMemory` or `ExplorationOverlay` for cognitive state
 *
 * ---------------------------
 * Dependents:
 * ---------------------------
 * - `BlockPathfinder`, `RegionPathfinder`: Use this to perform navigation
 * - `TaskPlanner`, `RequirementSolver`: Query world conditions and affordances
 * - `Memory`, `BehaviorProfile`: Evaluate conditions like danger or accessibility
 *
 * ---------------------------
 * Implementation Details:
 * ---------------------------
 * - Should expose methods like:
 *     - `Region getRegionAt(BlockPos pos)`
 *     - `BlockMap getBlockMapFor(Region region)`
 *     - `List<Portal> getPortalsFrom(Region)`
 *     - `boolean isTraversable(BlockPos)`
 *     - `RegionTree getRegionTree()`
 *     - `BlockTagMap getTagMapFor(BlockMap)`
 * - Implementations may support:
 *     - Snapshot vs. live mode
 *     - AI-perceived vs. real-world divergence
 */
package com.orebit.mod.worldmodel;

------------------
